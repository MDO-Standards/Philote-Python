# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chunk_pb2 as chunk__pb2
import data_pb2 as data__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ExplicitComponentStub(object):
    """Definition of the generic Explicit Component RPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Setup = channel.unary_stream(
                '/ExplicitComponent/Setup',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=data__pb2.VariableMetaData.FromString,
                )
        self.Compute = channel.stream_stream(
                '/ExplicitComponent/Compute',
                request_serializer=chunk__pb2.Chunk.SerializeToString,
                response_deserializer=chunk__pb2.Chunk.FromString,
                )
        self.ComputePartials = channel.stream_stream(
                '/ExplicitComponent/ComputePartials',
                request_serializer=chunk__pb2.Chunk.SerializeToString,
                response_deserializer=chunk__pb2.Chunk.FromString,
                )


class ExplicitComponentServicer(object):
    """Definition of the generic Explicit Component RPC
    """

    def Setup(self, request, context):
        """Sets up the component
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Compute(self, request_iterator, context):
        """Calls the component Compute function
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputePartials(self, request_iterator, context):
        """Calls the component ComputePartials function
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExplicitComponentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Setup': grpc.unary_stream_rpc_method_handler(
                    servicer.Setup,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=data__pb2.VariableMetaData.SerializeToString,
            ),
            'Compute': grpc.stream_stream_rpc_method_handler(
                    servicer.Compute,
                    request_deserializer=chunk__pb2.Chunk.FromString,
                    response_serializer=chunk__pb2.Chunk.SerializeToString,
            ),
            'ComputePartials': grpc.stream_stream_rpc_method_handler(
                    servicer.ComputePartials,
                    request_deserializer=chunk__pb2.Chunk.FromString,
                    response_serializer=chunk__pb2.Chunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ExplicitComponent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExplicitComponent(object):
    """Definition of the generic Explicit Component RPC
    """

    @staticmethod
    def Setup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ExplicitComponent/Setup',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            data__pb2.VariableMetaData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Compute(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ExplicitComponent/Compute',
            chunk__pb2.Chunk.SerializeToString,
            chunk__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputePartials(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ExplicitComponent/ComputePartials',
            chunk__pb2.Chunk.SerializeToString,
            chunk__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
